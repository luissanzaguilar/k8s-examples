# mysql-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  my.cnf: |
    [mysqld]
    server-id=1
    log-bin=mysql-bin
    binlog_format=row
    innodb_flush_log_at_trx_commit=1
    sync_binlog=1
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci
    default-authentication-plugin=mysql_native_password

  init.sql: |
    CREATE USER IF NOT EXISTS 'replicator'@'%' IDENTIFIED BY 'replicatepass';
    GRANT REPLICATION SLAVE ON *.* TO 'replicator'@'%';
    
    CREATE USER IF NOT EXISTS 'appuser'@'%' IDENTIFIED BY 'apppass';
    CREATE DATABASE IF NOT EXISTS appdb;
    GRANT ALL PRIVILEGES ON appdb.* TO 'appuser'@'%';
    FLUSH PRIVILEGES;
---
# mysql-statefulset-simple.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  ports:
    - name: mysql
      port: 3306
  clusterIP: None
  selector:
    app: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-readonly
  labels:
    app: mysql
spec:
  ports:
    - name: mysql
      port: 3306
  selector:
    app: mysql
    role: replica
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  serviceName: "mysql"
  replicas: 3
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
        - name: init-mysql
          image: mysql:8.0
          command: ['bash', '-c']
          args:
            - |
              # Generar server-id basado en el Ã­ndice del pod
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=$${BASH_REMATCH[1]}
              echo "[mysqld]" > /mnt/conf.d/server-id.cnf
              echo "server-id=$$((100 + $$ordinal))" >> /mnt/conf.d/server-id.cnf
              
              # Configurar como replica si no es el primer pod
              if [[ $$ordinal -gt 0 ]]; then
                echo "read_only=1" >> /mnt/conf.d/server-id.cnf
              fi
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "password"
            - name: MYSQL_DATABASE
              value: "appdb"
            - name: MYSQL_USER
              value: "appuser"
            - name: MYSQL_PASSWORD
              value: "apppass"
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
            - name: config
              mountPath: /docker-entrypoint-initdb.d
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping", "-h", "localhost", "-uroot", "-ppassword"]
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: ["mysql", "-h", "localhost", "-uroot", "-ppassword", "-e", "SELECT 1"]
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
      volumes:
        - name: conf
          emptyDir: {}
        - name: config
          configMap:
            name: mysql-config
            items:
              - key: init.sql
                path: init.sql
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "standard"
        resources:
          requests:
            storage: 5Gi